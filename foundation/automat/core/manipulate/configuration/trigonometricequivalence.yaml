---
className: 'Trigonometricequivalence'
type: 'trigonometric_standard'
#TODO put all these in : https://en.wikipedia.org/wiki/List_of_trigonometric_identities
manipulations:
  - type: 'regex'
    vor:
      scheme: '(/ (sin $0) (cos $0))'
      return: '(tan $0)'
    minArgs: #actually this is a preCond too
      $0: 0
    maxArgs:
      $0: null
    preCond:
      $0: null

  - type: 'regex'
    vor:
      scheme: '(/ (cos $0) (sin $0))'
      return: '(cot $0)'
    minArgs: #actually this is a preCond too
      $0: 0
    maxArgs:
      $0: null
    preCond:
      $0: null

  - type: 'regex'
    vor:
      scheme: '(/ 1 (sin $0))'
      return: '(cosec $0)'
    minArgs: #actually this is a preCond too
      $0: 0
    maxArgs:
      $0: null
    preCond:
      $0: null

  - type: 'regex'
    vor:
      scheme: '(/ 1 (cos $0))'
      return: '(sec $0)'
    minArgs: #actually this is a preCond too
      $0: 0
    maxArgs:
      $0: null
    preCond:
      $0: null

  - type: 'regex'
    vor:
      scheme: '(/ 1 (tan $0))'
      return: '(cot $0)'
    minArgs: #actually this is a preCond too
      $0: 0
    maxArgs:
      $0: null
    preCond:
      $0: null

  - type: 'regex'
    vor:
      scheme: '(/ 1 (cot $0))'
      return: '(tan $0)'
    minArgs: #actually this is a preCond too
      $0: 0
    maxArgs:
      $0: null
    preCond:
      $0: null

#\sin(-x)=-\sin(x)
  - type: 'regex'
    vor:
      scheme: '(sin (- 0 $0))'
      return: '(- 0 (sin $0))'
    minArgs: #actually this is a preCond too
      $0: 0
    maxArgs:
      $0: null
    preCond:
      $0: null

#\cos(-x)=\cos(x)
  - type: 'regex'
    vor:
      scheme: '(cos (- 0 $0))'
      return: '(cos $0)'
    minArgs: #actually this is a preCond too
      $0: 0
    maxArgs:
      $0: null
    preCond:
      $0: null

#\sin(x) = \frac{e^{i x}-e^{-i x}}{2 i}
  - type: 'regex'
    vor:
      scheme: '(sin $0)'
      return: '(/ (- (^ e (* i $0)) (^ e (- 0 (* i $0)))) (* 2 i))'
    minArgs: #actually this is a preCond too
      $0: 0
    maxArgs:
      $0: null
    preCond:
      $0: null

#\cos(x) = \frac{e^{i x}+e^{-i x}}{2}
  - type: 'regex'
    vor:
      scheme: '(cos $0)'
      return: '(/ (+ (^ e (* i $0)) (^ e (- 0 (* i $0)))) 2)'
    minArgs: #actually this is a preCond too
      $0: 0
    maxArgs:
      $0: null
    preCond:
      $0: null

#e^{i x}=\cos(x)+ i\sin(x)
  - type: 'regex'
    vor:
      scheme: '(^ e (* i $0))'
      return: '(+ (cos $0) (* i (sin $0)))'
    minArgs: #actually this is a preCond too
      $0: 0
    maxArgs:
      $0: null
    preCond:
      $0: null
