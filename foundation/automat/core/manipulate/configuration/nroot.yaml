---
className: "Nroot"
type: "essential"
# https://en.wikipedia.org/wiki/Nth_root#Identities_and_properties
manipulations:
  - type: "regex"
    vor:
      scheme: '(nroot $0 (^ $1 $2))'
      return: '(^ $1 (/ $2 $0))'
    minArgs:
      $0: 0
      $1: 0
      $2: 0
    maxArgs:
      $0: null
      $1: null
      $2: null
    preCond:
      $0: null
      $1: null
      $2: null

  - type: "regex"
    vor:
      scheme: '(^ (nroot $0 $1) $2)'
      return: '(nroot $0 (^ $1 $2))'
    minArgs:
      $0: 0
      $1: 0
      $2: 0
    maxArgs:
      $0: null
      $1: null
      $2: null
    preCond:
      $0: null
      $1: null
      $2: null

  - type: "regex"
    vor:
      scheme: '(^ (nroot $0 $1) $2)'
      return: '(^ $1 (/ $2 $0))'
    minArgs:
      $0: 0
      $1: 0
      $2: 0
    maxArgs:
      $0: null
      $1: null
      $2: null
    preCond:
      $0: null
      $1: null
      $2: null

#below does not work for complex numbers, sqrt(ab) = sqrt(a)sqrt(b)
#Looks like distributivity, maybe can further refactor...
  - type: "regex"
    vor:
      scheme: '(nroot $2 (* $0 $1))'
      return: '(* (nroot $2 $0) (nroot $2 $1))'
    minArgs:
      $0: 0
      $1: 0
      $2: 0
    maxArgs:
      $0: null
      $1: null
      $2: null
    preCond:
      $0: null
      $1: null
      $2: null
        
#Looks like distributivity, maybe can further refactor...
  - type: "regex"
    vor:
      scheme: '(nroot $2 (/ $0 $1))'
      return: '(/ (nroot $2 $0) (nroot $2 $1))'
    minArgs:
      $0: 0
      $1: 0
      $2: 0
    maxArgs:
      $0: null
      $1: null
      $2: null
    preCond:
      $0: null
      $1: null
      $2: null