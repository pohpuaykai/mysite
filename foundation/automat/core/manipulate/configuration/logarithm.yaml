---
className: 'Logarithm'
type: 'essential'
# https://en.wikipedia.org/wiki/Logarithm#Logarithmic_identities
manipulations:
  # Product Identity
  - type: 'regex'
    vor:
      scheme: '(log $0 (* $1 $2))'
      return: '(+ (log $0 $1) (log $0 $2))'
    minArgs:
      $0: 0
      $1: 0
      $2: 0
    maxArgs:
      $0: null
      $1: null
      $2: null
    preCond:
      $0: null
      $1: null
      $2: null
  # Quotient Identity
  - type: 'regex'
    vor:
      scheme: '(log $0 (/ $1 $2))'
      return: '(- (log $0 $1) (log $0 $2))'
    minArgs:
      $0: 0
      $1: 0
      $2: 0
    maxArgs:
      $0: null
      $1: null
      $2: null
    preCond:
      $0: null
      $1: null
      $2: null
  # Power Identity
  - type: 'regex'
    vor:
      scheme: '(log $0 (^ $1 $2))'
      return: '(* $2 (log $0 $1))'
    minArgs:
      $0: 0
      $1: 0
      $2: 0
    maxArgs:
      $0: null
      $1: null
      $2: null
    preCond:
      $0: null
      $1: null
      $2: null
  # Root Identity
  - type: 'regex'
    vor:
      scheme: '(log $0 (nroot $1 $2))'
      return: '(/ (log $0 $2) $1)'
    minArgs:
      $0: 0
      $1: 0
      $2: 0
    maxArgs:
      $0: null
      $1: null
      $2: null
    preCond:
      $0: null
      $1: null
      $2: null
  # Change of base
  - type: 'regex'
    vor:
      scheme: '(/ (log $2 $1) (log $2 $0))'
      return: '(log $0 $1)'
    minArgs:
      $0: 0
      $1: 0
      $2: 0
    maxArgs:
      $0: null
      $1: null
      $2: null
    preCond:
      $0: null
      $1: null
      $2: null
  # 
  - type: 'regex'
    vor:
      scheme: '(log $0 $0)'
      return: '1'
    minArgs:
      $0: 0
    maxArgs:
      $0: null
    preCond:
      $0: null
  #
  - type: 'regex'
    vor:
      scheme: '(log $0 1)'
      return: '0'
    minArgs:
      $0: 0
    maxArgs:
      $0: null
    preCond:
      $0: null