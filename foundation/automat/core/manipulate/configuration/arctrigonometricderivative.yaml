---
className: 'Arctrigonometricderivative'
type: 'derivative_trigonometric'
manipulations:


  - type: 'regex'
    vor:
      scheme: '(D (arcsin $0) $1)'
      return: '(* (/ 1 (nroot 2 (- 1 (* $0 $0)))) (D $0 $1))'
    minArgs:
      $0: 1 # variable
      $1: 1 # variable
    maxArgs:
      $0: null
      $1: null
    preCond:
      $0: null
      $1: null


  - type: 'regex'
    vor:
      scheme: '(D (arccos $0) $1)'
      return: '(* (- 0 (/ 1 (nroot 2 (- 1 (* $0 $0))))) (D $0 $1))'
    minArgs:
      $0: 1 # variable
      $1: 1 # variable
    maxArgs:
      $0: null
      $1: null
    preCond:
      $0: null
      $1: null


  - type: 'regex'
    vor:
      scheme: '(D (arctan $0) $1)'
      return: '(* (/ 1 (+ 1 (* $0 $0))) (D $0 $1))'
    minArgs:
      $0: 1 # variable
      $1: 1 # variable
    maxArgs:
      $0: null
      $1: null
    preCond:
      $0: null
      $1: null


  - type: 'regex'
    vor:
      scheme: '(D (arcsec $0) $1)'
      return: '(* (/ 1 (* $0 (nroot 2 (- (* $0 $0) 1)))) (D $0 $1))'
    minArgs:
      $0: 1 # variable
      $1: 1 # variable
    maxArgs:
      $0: null
      $1: null
    preCond:
      $0: null
      $1: null


  - type: 'regex'
    vor:
      scheme: '(D (arccosec $0) $1)'
      return: '(* (nroot 2 (- (* $0 $0) 1)) (D $1 $0))'
    minArgs:
      $0: 1 # variable
      $1: 1 # variable
    maxArgs:
      $0: null
      $1: null
    preCond:
      $0: null
      $1: null


  - type: 'regex'
    vor:
      scheme: '(D (arccot $0) $1)'
      return: '(* (- 0 (/ 1 (+ 1 (* $0 $0)))) (D $0 $1))'
    minArgs:
      $0: 1 # variable
      $1: 1 # variable
    maxArgs:
      $0: null
      $1: null
    preCond:
      $0: null
      $1: null
