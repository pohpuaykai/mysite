
from foundation.automat.core.manipulate.manipulate import Manipulate


class Trigonometrichalfangle(Manipulate):
    """

    """
    TYPE = 'trigonometric_standard'

    def __init__(self, equation, direction, idx, calculateSchemeNodeChanges=False, verbose=False):
        """

        """
        self.rawRegexes = [{'type': 'regex', 'vor': {'scheme': '(^ (sin (/ $0 2)) 2)', 'return': '(/ (- 1 (cos $0)) 2)'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (- 1 (cos $0)) 2)', 'return': '(^ (sin (/ $0 2)) 2)'}}, {'type': 'regex', 'vor': {'scheme': '(^ (cos (/ $0 2)) 2)', 'return': '(/ (+ 1 (cos $0)) 2)'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (+ 1 (cos $0)) 2)', 'return': '(^ (cos (/ $0 2)) 2)'}}, {'type': 'regex', 'vor': {'scheme': '(tan (/ $0 2))', 'return': '(- (cosec $0) (cot $0))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(- (cosec $0) (cot $0))', 'return': '(tan (/ $0 2))'}}, {'type': 'regex', 'vor': {'scheme': '(tan (/ $0 2))', 'return': '(nroot 2 (/ (- 1 (cos $0)) (+ 1 (cos $0))))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(nroot 2 (/ (- 1 (cos $0)) (+ 1 (cos $0))))', 'return': '(tan (/ $0 2))'}}, {'type': 'regex', 'vor': {'scheme': '(tan (/ $0 2))', 'return': '(- 0 (nroot 2 (/ (- 1 (cos $0)) (+ 1 (cos $0)))))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(- 0 (nroot 2 (/ (- 1 (cos $0)) (+ 1 (cos $0)))))', 'return': '(tan (/ $0 2))'}}, {'type': 'regex', 'vor': {'scheme': '(tan (/ $0 2))', 'return': '(- 0 (nroot 2 (/ (- 1 (cos $0)) (+ 1 (cos $0)))))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(- 0 (nroot 2 (/ (- 1 (cos $0)) (+ 1 (cos $0)))))', 'return': '(tan (/ $0 2))'}}, {'type': 'regex', 'vor': {'scheme': '(tan (/ $0 2))', 'return': '(/ (sin $0) (+ 1 (cos $0)))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (sin $0) (+ 1 (cos $0)))', 'return': '(tan (/ $0 2))'}}, {'type': 'regex', 'vor': {'scheme': '(tan (/ $0 2))', 'return': '(/ (- 1 (cos $0)) (sin $0))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (- 1 (cos $0)) (sin $0))', 'return': '(tan (/ $0 2))'}}, {'type': 'regex', 'vor': {'scheme': '(cot (/ $0 2))', 'return': '(+ (cosec $0) (cot $0))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(+ (cosec $0) (cot $0))', 'return': '(cot (/ $0 2))'}}, {'type': 'regex', 'vor': {'scheme': '(cot (/ $0 2))', 'return': '(nroot 2 (/ (+ 1 (cos $0)) (- 1 (cos $0))))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(nroot 2 (/ (+ 1 (cos $0)) (- 1 (cos $0))))', 'return': '(cot (/ $0 2))'}}, {'type': 'regex', 'vor': {'scheme': '(cot (/ $0 2))', 'return': '(- 0 (nroot 2 (/ (+ 1 (cos $0)) (- 1 (cos $0)))))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(- 0 (nroot 2 (/ (+ 1 (cos $0)) (- 1 (cos $0)))))', 'return': '(cot (/ $0 2))'}}, {'type': 'regex', 'vor': {'scheme': '(cot (/ $0 2))', 'return': '(/ (sin $0) (- 1 (cos $0)))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (sin $0) (- 1 (cos $0)))', 'return': '(cot (/ $0 2))'}}, {'type': 'regex', 'vor': {'scheme': '(cot (/ $0 2))', 'return': '(/ (+ 1 (cos $0)) (sin $0))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (+ 1 (cos $0)) (sin $0))', 'return': '(cot (/ $0 2))'}}]
        super().__init__(equation, direction, idx, calculateSchemeNodeChanges=calculateSchemeNodeChanges, verbose=verbose)