
from foundation.automat.core.manipulate.manipulate import Manipulate


class Trigonometricplusminus(Manipulate):
    """

    """
    TYPE = 'trigonometric_standard'

    def __init__(self, equation, direction, idx, verbose=False):
        """

        """
        self.rawRegexes = [{'type': 'regex', 'vor': {'scheme': '(sin (+ $0 $1))', 'return': '(+ (* (sin $0) (cos $1)) (* (cos $0) (sin $1)))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(+ (* (sin $0) (cos $1)) (* (cos $0) (sin $1)))', 'return': '(sin (+ $0 $1))'}}, {'type': 'regex', 'vor': {'scheme': '(sin (- $0 $1))', 'return': '(- (* (sin $0) (cos $1)) (* (cos $0) (sin $1)))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(- (* (sin $0) (cos $1)) (* (cos $0) (sin $1)))', 'return': '(sin (- $0 $1))'}}, {'type': 'regex', 'vor': {'scheme': '(cos (+ $0 $1))', 'return': '(- (* (cos $0) (cos $1)) (* (sin $0) (sin $1)))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(- (* (cos $0) (cos $1)) (* (sin $0) (sin $1)))', 'return': '(cos (+ $0 $1))'}}, {'type': 'regex', 'vor': {'scheme': '(cos (- $0 $1))', 'return': '(+ (* (cos $0) (cos $1)) (* (sin $0) (sin $1)))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(+ (* (cos $0) (cos $1)) (* (sin $0) (sin $1)))', 'return': '(cos (- $0 $1))'}}, {'type': 'regex', 'vor': {'scheme': '(tan (+ $0 $1))', 'return': '(/ (+ (tan $0) (tan $1)) (- 1 (* (tan $0) (tan $1))))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (+ (tan $0) (tan $1)) (- 1 (* (tan $0) (tan $1))))', 'return': '(tan (+ $0 $1))'}}, {'type': 'regex', 'vor': {'scheme': '(tan (- $0 $1))', 'return': '(/ (- (tan $0) (tan $1)) (+ 1 (* (tan $0) (tan $1))))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (- (tan $0) (tan $1)) (+ 1 (* (tan $0) (tan $1))))', 'return': '(tan (- $0 $1))'}}, {'type': 'regex', 'vor': {'scheme': '(cosec (+ $0 $1))', 'return': '(/ (* (* (* (sec $0) (sec $1)) (cosec $0)) (cosec $1)) (+ (* (sec $0) (cosec $1)) (* (cosec $0) (sec $1))))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (* (* (* (sec $0) (sec $1)) (cosec $0)) (cosec $1)) (+ (* (sec $0) (cosec $1)) (* (cosec $0) (sec $1))))', 'return': '(cosec (+ $0 $1))'}}, {'type': 'regex', 'vor': {'scheme': '(cosec (- $0 $1))', 'return': '(/ (* (* (* (sec $0) (sec $1)) (cosec $0)) (cosec $1)) (- (* (sec $0) (cosec $1)) (* (cosec $0) (sec $1))))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (* (* (* (sec $0) (sec $1)) (cosec $0)) (cosec $1)) (- (* (sec $0) (cosec $1)) (* (cosec $0) (sec $1))))', 'return': '(cosec (- $0 $1))'}}, {'type': 'regex', 'vor': {'scheme': '(cosec (+ $0 $1))', 'return': '(/ (* (* (* (sec $0) (sec $1)) (cosec $0)) (cosec $1)) (- (* (sec $0) (cosec $1)) (* (cosec $0) (sec $1))))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (* (* (* (sec $0) (sec $1)) (cosec $0)) (cosec $1)) (- (* (sec $0) (cosec $1)) (* (cosec $0) (sec $1))))', 'return': '(cosec (+ $0 $1))'}}, {'type': 'regex', 'vor': {'scheme': '(cosec (- $0 $1))', 'return': '(/ (* (* (* (sec $0) (sec $1)) (cosec $0)) (cosec $1)) (+ (* (sec $0) (cosec $1)) (* (cosec $0) (sec $1))))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (* (* (* (sec $0) (sec $1)) (cosec $0)) (cosec $1)) (+ (* (sec $0) (cosec $1)) (* (cosec $0) (sec $1))))', 'return': '(cosec (- $0 $1))'}}, {'type': 'regex', 'vor': {'scheme': '(cot (+ $0 $1))', 'return': '(/ (- (* (cot $0) (cot $1)) 1) (+ (cot $1) (cot $0)))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (- (* (cot $0) (cot $1)) 1) (+ (cot $1) (cot $0)))', 'return': '(cot (+ $0 $1))'}}, {'type': 'regex', 'vor': {'scheme': '(cot (- $0 $1))', 'return': '(/ (+ (* (cot $0) (cot $1)) 1) (- (cot $1) (cot $0)))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (+ (* (cot $0) (cot $1)) 1) (- (cot $1) (cot $0)))', 'return': '(cot (- $0 $1))'}}, {'type': 'regex', 'vor': {'scheme': '(+ (arcsin $0) (arcsin $1))', 'return': '(arcsin (+ (* $0 (nroot 2 (- 1 (^ $1 2)))) (* $1 (nroot 2 (- 1 (^ $0 2))))))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(arcsin (+ (* $0 (nroot 2 (- 1 (^ $1 2)))) (* $1 (nroot 2 (- 1 (^ $0 2))))))', 'return': '(+ (arcsin $0) (arcsin $1))'}}, {'type': 'regex', 'vor': {'scheme': '(- (arcsin $0) (arcsin $1))', 'return': '(arcsin (- (* $0 (nroot 2 (- 1 (^ $1 2)))) (* $1 (nroot 2 (- 1 (^ $0 2))))))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(arcsin (- (* $0 (nroot 2 (- 1 (^ $1 2)))) (* $1 (nroot 2 (- 1 (^ $0 2))))))', 'return': '(- (arcsin $0) (arcsin $1))'}}, {'type': 'regex', 'vor': {'scheme': '(+ (arccos $0) (arccos $1))', 'return': '(arccos (- (* $0 $1) (nroot 2 (* (- 1 (^ $0 2)) (- 1 (^ $1 2))))))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(arccos (- (* $0 $1) (nroot 2 (* (- 1 (^ $0 2)) (- 1 (^ $1 2))))))', 'return': '(+ (arccos $0) (arccos $1))'}}, {'type': 'regex', 'vor': {'scheme': '(- (arccos $0) (arccos $1))', 'return': '(arccos (+ (* $0 $1) (nroot 2 (* (- 1 (^ $0 2)) (- 1 (^ $1 2))))))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(arccos (+ (* $0 $1) (nroot 2 (* (- 1 (^ $0 2)) (- 1 (^ $1 2))))))', 'return': '(- (arccos $0) (arccos $1))'}}, {'type': 'regex', 'vor': {'scheme': '(+ (arctan $0) (arctan $1))', 'return': '(arctan (/ (+ $0 $1) (- 1 (* $0 $1))))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(arctan (/ (+ $0 $1) (- 1 (* $0 $1))))', 'return': '(+ (arctan $0) (arctan $1))'}}, {'type': 'regex', 'vor': {'scheme': '(- (arctan $0) (arctan $1))', 'return': '(arctan (/ (- $0 $1) (+ 1 (* $0 $1))))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(arctan (/ (- $0 $1) (+ 1 (* $0 $1))))', 'return': '(- (arctan $0) (arctan $1))'}}, {'type': 'regex', 'vor': {'scheme': '(+ (arccot $0) (arccot $1))', 'return': '(arccot (/ (- (* $0 $1) 1) (+ $1 $0)))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(arccot (/ (- (* $0 $1) 1) (+ $1 $0)))', 'return': '(+ (arccot $0) (arccot $1))'}}, {'type': 'regex', 'vor': {'scheme': '(- (arccot $0) (arccot $1))', 'return': '(arccot (/ (+ (* $0 $1) 1) (- $1 $0)))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(arccot (/ (+ (* $0 $1) 1) (- $1 $0)))', 'return': '(- (arccot $0) (arccot $1))'}}]
        super().__init__(equation, direction, idx, verbose=verbose)