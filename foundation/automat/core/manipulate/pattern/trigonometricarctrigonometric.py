
from foundation.automat.core.manipulate.manipulate import Manipulate


class Trigonometricarctrigonometric(Manipulate):
    """

    """
    TYPE = 'trigonometric_standard'

    def __init__(self, equation, direction, idx, verbose=False):
        """

        """
        self.rawRegexes = [{'type': 'regex', 'vor': {'scheme': '(sin (arcsin $0))', 'return': '$0'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '$0', 'return': '(sin (arcsin $0))'}}, {'type': 'regex', 'vor': {'scheme': '(sin (arccos $0))', 'return': '(nroot 2 (- 1 (^ $0 2)))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(nroot 2 (- 1 (^ $0 2)))', 'return': '(sin (arccos $0))'}}, {'type': 'regex', 'vor': {'scheme': '(sin (arctan $0))', 'return': '(/ $0 (nroot 2 (+ 1 (^ $0 2))))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ $0 (nroot 2 (+ 1 (^ $0 2))))', 'return': '(sin (arctan $0))'}}, {'type': 'regex', 'vor': {'scheme': '(sin (arccosec $0))', 'return': '(/ 1 $0)'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ 1 $0)', 'return': '(sin (arccosec $0))'}}, {'type': 'regex', 'vor': {'scheme': '(sin (arcsec $0))', 'return': '(/ (nroot 2 (- (^ $0 2) 1)) $0)'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (nroot 2 (- (^ $0 2) 1)) $0)', 'return': '(sin (arcsec $0))'}}, {'type': 'regex', 'vor': {'scheme': '(sin (arccot $0))', 'return': '(/ 1 (nroot 2 (+ 1 (^ $0 2))))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ 1 (nroot 2 (+ 1 (^ $0 2))))', 'return': '(sin (arccot $0))'}}, {'type': 'regex', 'vor': {'scheme': '(cos (arcsin $0))', 'return': '(nroot 2 (- 1 (^ $0 2)))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(nroot 2 (- 1 (^ $0 2)))', 'return': '(cos (arcsin $0))'}}, {'type': 'regex', 'vor': {'scheme': '(cos (arccos $0))', 'return': '$0'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '$0', 'return': '(cos (arccos $0))'}}, {'type': 'regex', 'vor': {'scheme': '(cos (arctan $0))', 'return': '(/ 1 (nroot 2 (+ 1 (^ $0 2))))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ 1 (nroot 2 (+ 1 (^ $0 2))))', 'return': '(cos (arctan $0))'}}, {'type': 'regex', 'vor': {'scheme': '(cos (arccosec $0))', 'return': '(/ (nroot 2 (- (^ $0 2) 1)) $0)'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (nroot 2 (- (^ $0 2) 1)) $0)', 'return': '(cos (arccosec $0))'}}, {'type': 'regex', 'vor': {'scheme': '(cos (arcsec $0))', 'return': '(/ 1 $0)'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ 1 $0)', 'return': '(cos (arcsec $0))'}}, {'type': 'regex', 'vor': {'scheme': '(cos (arccot $0))', 'return': '(/ $0 (nroot 2 (+ 1 (^ $0 2))))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ $0 (nroot 2 (+ 1 (^ $0 2))))', 'return': '(cos (arccot $0))'}}, {'type': 'regex', 'vor': {'scheme': '(tan (arcsin $0))', 'return': '(/ $0 (nroot 2 (- 1 (^ $0 2))))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ $0 (nroot 2 (- 1 (^ $0 2))))', 'return': '(tan (arcsin $0))'}}, {'type': 'regex', 'vor': {'scheme': '(tan (arccos $0))', 'return': '(/ (nroot 2 (- 1 (^ $0 2))) $0)'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (nroot 2 (- 1 (^ $0 2))) $0)', 'return': '(tan (arccos $0))'}}, {'type': 'regex', 'vor': {'scheme': '(tan (arctan $0))', 'return': '$0'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '$0', 'return': '(tan (arctan $0))'}}, {'type': 'regex', 'vor': {'scheme': '(tan (arccosec $0))', 'return': '(/ 1 (nroot 2 (- (^ $0 2) 1)))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ 1 (nroot 2 (- (^ $0 2) 1)))', 'return': '(tan (arccosec $0))'}}, {'type': 'regex', 'vor': {'scheme': '(tan (arcsec $0))', 'return': '(nroot 2 (- (^ $0 2) 1))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(nroot 2 (- (^ $0 2) 1))', 'return': '(tan (arcsec $0))'}}, {'type': 'regex', 'vor': {'scheme': '(tan (arccot $0))', 'return': '(/ 1 $0)'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ 1 $0)', 'return': '(tan (arccot $0))'}}]
        super().__init__(equation, direction, idx, verbose=verbose)