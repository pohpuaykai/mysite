
from foundation.automat.core.manipulate.manipulate import Manipulate


class Partialfraction(Manipulate):
    """

    """
    TYPE = 'essential'

    def __init__(self, equation, direction, idx, calculateSchemeNodeChanges=False, verbose=False):
        """

        """
        self.rawRegexes = [{'type': 'regex', 'vor': {'scheme': '(/ (+ (* $1 $0) $2) (* (- $0 $3) (- $0 $4)))', 'return': '(+ (/ (- $1 (/ (* (- $2 (* $1 $4)) $4) (- $3 $4))) (- $0 $3)) (/ (/ (* (- $2 (* $4 $1)) $4) (- $3 $4)) (- $0 $4)))'}, 'minArgs': {'$0': 1, '$1': 0, '$2': 0, '$3': 0, '$4': 0}, 'maxArgs': {'$0': None, '$1': None, '$2': None, '$3': None, '$4': None}, 'preCond': {'$0': None, '$1': None, '$2': None, '$3': None, '$4': None}, 'hin': {'scheme': '(+ (/ (- $1 (/ (* (- $2 (* $1 $4)) $4) (- $3 $4))) (- $0 $3)) (/ (/ (* (- $2 (* $4 $1)) $4) (- $3 $4)) (- $0 $4)))', 'return': '(/ (+ (* $1 $0) $2) (* (- $0 $3) (- $0 $4)))'}}, {'type': 'regex', 'vor': {'scheme': '(/ (+ (* $1 $0) $2) (^ (- $0 $3) 2))', 'return': '(+ (/ $1 (- $0 $3)) (/ (+ (* $3 $1) $2) (^ (- $0 $3) 2)))'}, 'minArgs': {'$0': 1, '$1': 0, '$2': 0, '$3': 0}, 'maxArgs': {'$0': None, '$1': None, '$2': None, '$3': None}, 'preCond': {'$0': None, '$1': None, '$2': None, '$3': None}, 'hin': {'scheme': '(+ (/ $1 (- $0 $3)) (/ (+ (* $3 $1) $2) (^ (- $0 $3) 2)))', 'return': '(/ (+ (* $1 $0) $2) (^ (- $0 $3) 2))'}}, {'type': 'regex', 'vor': {'scheme': '(/ (+ (+ (* $1 (^ $0 2)) (* $2 $0)) $3) (* (* (- $0 $4) (- $0 $5)) (- $0 $6)))', 'return': '(+ (+ (/ (/ (+ (- (* (^ $4 2) $1) (* $4 $2)) $3) (* (- $4 $5) (- $4 $6))) (- $0 $4)) (/ (/ (- (- (* $5 $2) $3) (* (^ $5 2) $1)) (* (- $4 $5) (- $5 $6))) (- $0 $5))) (/ (/ (+ (- $3 (* $6 $2)) (* (^ $6 2) $1)) (* (- $4 $6) (- $5 $6))) (- $0 $6)))'}, 'minArgs': {'$0': 1, '$1': 0, '$2': 0, '$3': 0, '$4': 0, '$5': 0, '$6': 0}, 'maxArgs': {'$0': None, '$1': None, '$2': None, '$3': None, '$4': None, '$5': None, '$6': None}, 'preCond': {'$0': None, '$1': None, '$2': None, '$3': None, '$4': None, '$5': None, '$6': None}, 'hin': {'scheme': '(+ (+ (/ (/ (+ (- (* (^ $4 2) $1) (* $4 $2)) $3) (* (- $4 $5) (- $4 $6))) (- $0 $4)) (/ (/ (- (- (* $5 $2) $3) (* (^ $5 2) $1)) (* (- $4 $5) (- $5 $6))) (- $0 $5))) (/ (/ (+ (- $3 (* $6 $2)) (* (^ $6 2) $1)) (* (- $4 $6) (- $5 $6))) (- $0 $6)))', 'return': '(/ (+ (+ (* $1 (^ $0 2)) (* $2 $0)) $3) (* (* (- $0 $4) (- $0 $5)) (- $0 $6)))'}}, {'type': 'regex', 'vor': {'scheme': '(/ (+ (+ (* $1 (^ $0 2)) (* $2 $0)) $3) (* (^ (- $0 $4) 2) (- $0 $5)))', 'return': '(+ (+ (/ (/ (- (- (- (* (^ $4 2) $1) (* (* (* 2 $4) $5) $1)) (* $2 $5)) $3) (^ (- $5 $4) 2)) (- $0 $4)) (/ (/ (+ (+ (^ $4 2) $4) $3) (- $4 $5)) (^ (- $0 $4) 2))) (/ (/ (+ (+ (* (^ $5 2) $1) (* $5 $2)) $3) (^ (- $5 $4) 2)) (- $0 $5)))'}, 'minArgs': {'$0': 1, '$1': 0, '$2': 0, '$3': 0, '$4': 0, '$5': 0}, 'maxArgs': {'$0': None, '$1': None, '$2': None, '$3': None, '$4': None, '$5': None}, 'preCond': {'$0': None, '$1': None, '$2': None, '$3': None, '$4': None, '$5': None}, 'hin': {'scheme': '(+ (+ (/ (/ (- (- (- (* (^ $4 2) $1) (* (* (* 2 $4) $5) $1)) (* $2 $5)) $3) (^ (- $5 $4) 2)) (- $0 $4)) (/ (/ (+ (+ (^ $4 2) $4) $3) (- $4 $5)) (^ (- $0 $4) 2))) (/ (/ (+ (+ (* (^ $5 2) $1) (* $5 $2)) $3) (^ (- $5 $4) 2)) (- $0 $5)))', 'return': '(/ (+ (+ (* $1 (^ $0 2)) (* $2 $0)) $3) (* (^ (- $0 $4) 2) (- $0 $5)))'}}, {'type': 'regex', 'vor': {'scheme': '(/ (+ (+ (* $1 (^ $0 2)) (* $2 $0)) $3) (* (- $0 $4) (+ (+ (^ $0 2) (* $5 $0)) $6)))', 'return': '(+ (/ (/ (+ (+ (* (^ $4 2) $1) (* $4 $2)) $3) (+ (+ (^ $4 2) (* $4 $5)) $6)) (- $0 $4)) (/ (+ (* (/ (+ (- (* (* $4 $5) $1) (* $4 $2)) (- (* $1 $6) $3)) (+ (+ (^ $4 2) (* $4 $5)) $6)) $0) (/ (+ (+ (* (* $4 $1) $6) (* $4 $3)) (- (* $5 $3) (* $6 $2))) (+ (+ (^ $4 2) (* $4 $5)) $6))) (+ (+ (^ $0 2) (* $5 $0)) $6)))'}, 'minArgs': {'$0': 1, '$1': 0, '$2': 0, '$3': 0, '$4': 0, '$5': 0, '$6': 0}, 'maxArgs': {'$0': None, '$1': None, '$2': None, '$3': None, '$4': None, '$5': None, '$6': None}, 'preCond': {'$0': None, '$1': None, '$2': None, '$3': None, '$4': None, '$5': None, '$6': None}, 'hin': {'scheme': '(+ (/ (/ (+ (+ (* (^ $4 2) $1) (* $4 $2)) $3) (+ (+ (^ $4 2) (* $4 $5)) $6)) (- $0 $4)) (/ (+ (* (/ (+ (- (* (* $4 $5) $1) (* $4 $2)) (- (* $1 $6) $3)) (+ (+ (^ $4 2) (* $4 $5)) $6)) $0) (/ (+ (+ (* (* $4 $1) $6) (* $4 $3)) (- (* $5 $3) (* $6 $2))) (+ (+ (^ $4 2) (* $4 $5)) $6))) (+ (+ (^ $0 2) (* $5 $0)) $6)))', 'return': '(/ (+ (+ (* $1 (^ $0 2)) (* $2 $0)) $3) (* (- $0 $4) (+ (+ (^ $0 2) (* $5 $0)) $6)))'}}]
        super().__init__(equation, direction, idx, calculateSchemeNodeChanges=calculateSchemeNodeChanges, verbose=verbose)