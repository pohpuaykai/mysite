
from foundation.automat.core.manipulate.manipulate import Manipulate


class Hyperbolictrigonometricdefinition(Manipulate):
    """

    """
    TYPE = 'essential'

    def __init__(self, equation, direction, idx, verbose=False):
        """

        """
        self.rawRegexes = [{'type': 'regex', 'vor': {'scheme': '(cosh $0)', 'return': '(/ (+ (^ e $0) (^ e (- 0 $0))) 2)'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (+ (^ e $0) (^ e (- 0 $0))) 2)', 'return': '(cosh $0)'}}, {'type': 'regex', 'vor': {'scheme': '(sinh $0)', 'return': '(/ (- (^ e $0) (^ e (- 0 $0))) 2)'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (- (^ e $0) (^ e (- 0 $0))) 2)', 'return': '(sinh $0)'}}, {'type': 'regex', 'vor': {'scheme': '(cosh (- 0 $0))', 'return': '(cosh $0)'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(cosh $0)', 'return': '(cosh (- 0 $0))'}}, {'type': 'regex', 'vor': {'scheme': '(sin $0)', 'return': '(- 0 (* i (sinh (* i $0))))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(- 0 (* i (sinh (* i $0))))', 'return': '(sin $0)'}}, {'type': 'regex', 'vor': {'scheme': '(cos $0)', 'return': '(cosh (* i $0))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(cosh (* i $0))', 'return': '(cos $0)'}}, {'type': 'regex', 'vor': {'scheme': '(sin (* i $0))', 'return': '(* i (sinh $0))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(* i (sinh $0))', 'return': '(sin (* i $0))'}}, {'type': 'regex', 'vor': {'scheme': '(cos (* i $0))', 'return': '(cosh $0)'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(cosh $0)', 'return': '(cos (* i $0))'}}, {'type': 'regex', 'vor': {'scheme': '(sinh (- 0 $0))', 'return': '(- 0 (sinh $0))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(- 0 (sinh $0))', 'return': '(sinh (- 0 $0))'}}, {'type': 'regex', 'vor': {'scheme': '(tan $0)', 'return': '(- 0 (* i (tanh (* i $0))))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(- 0 (* i (tanh (* i $0))))', 'return': '(tan $0)'}}, {'type': 'regex', 'vor': {'scheme': '(cot $0)', 'return': '(* i (coth (* i $0)))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(* i (coth (* i $0)))', 'return': '(cot $0)'}}, {'type': 'regex', 'vor': {'scheme': '(sec $0)', 'return': '(sech (* i $0))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(sech (* i $0))', 'return': '(sec $0)'}}, {'type': 'regex', 'vor': {'scheme': '(cosec $0)', 'return': '(* i (cosech (* i $0)))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(* i (cosech (* i $0)))', 'return': '(cosec $0)'}}, {'type': 'regex', 'vor': {'scheme': '(tanh (- 0 $0))', 'return': '(- 0 (tanh $0))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(- 0 (tanh $0))', 'return': '(tanh (- 0 $0))'}}, {'type': 'regex', 'vor': {'scheme': '(coth (- 0 $0))', 'return': '(- 0 (coth $0))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(- 0 (coth $0))', 'return': '(coth (- 0 $0))'}}, {'type': 'regex', 'vor': {'scheme': '(sech (- 0 $0))', 'return': '(sech $0)'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(sech $0)', 'return': '(sech (- 0 $0))'}}, {'type': 'regex', 'vor': {'scheme': '(cosech (- 0 $0))', 'return': '(- 0 (cosech $0))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(- 0 (cosech $0))', 'return': '(cosech (- 0 $0))'}}]
        super().__init__(equation, direction, idx, verbose=verbose)