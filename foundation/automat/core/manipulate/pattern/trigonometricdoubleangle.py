
from foundation.automat.core.manipulate.manipulate import Manipulate


class Trigonometricdoubleangle(Manipulate):
    """

    """
    TYPE = 'trigonometric_standard'

    def __init__(self, equation, direction, idx, calculateSchemeNodeChanges=False, verbose=False):
        """

        """
        self.rawRegexes = [{'type': 'regex', 'vor': {'scheme': '(sin (* 2 $0))', 'return': '(* (* 2 (sin $0)) (cos $0))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(* (* 2 (sin $0)) (cos $0))', 'return': '(sin (* 2 $0))'}}, {'type': 'regex', 'vor': {'scheme': '(sin (* 2 $0))', 'return': '(/ (* 2 (tan $0)) (+ 1 (^ (tan $0) 2)))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (* 2 (tan $0)) (+ 1 (^ (tan $0) 2)))', 'return': '(sin (* 2 $0))'}}, {'type': 'regex', 'vor': {'scheme': '(cos (* 2 $0))', 'return': '(- (^ (cos $0) 2) (^ (sin $0) 2))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(- (^ (cos $0) 2) (^ (sin $0) 2))', 'return': '(cos (* 2 $0))'}}, {'type': 'regex', 'vor': {'scheme': '(cos (* 2 $0))', 'return': '(- (* 2 (^ (cos $0) 2)) 1)'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(- (* 2 (^ (cos $0) 2)) 1)', 'return': '(cos (* 2 $0))'}}, {'type': 'regex', 'vor': {'scheme': '(cos (* 2 $0))', 'return': '(- 1 (* 2 (^ (sin $0) 2)))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(- 1 (* 2 (^ (sin $0) 2)))', 'return': '(cos (* 2 $0))'}}, {'type': 'regex', 'vor': {'scheme': '(cos (* 2 $0))', 'return': '(/ (- 1 (^ (tan $0) 2)) (+ 1 (^ (tan $0) 2)))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (- 1 (^ (tan $0) 2)) (+ 1 (^ (tan $0) 2)))', 'return': '(cos (* 2 $0))'}}, {'type': 'regex', 'vor': {'scheme': '(tan (* 2 $0))', 'return': '(/ (* 2 (tan $0)) (- 1 (^ (tan $0) 2)))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (* 2 (tan $0)) (- 1 (^ (tan $0) 2)))', 'return': '(tan (* 2 $0))'}}, {'type': 'regex', 'vor': {'scheme': '(cot (* 2 $0))', 'return': '(/ (- (* (^ cot 2) $0) 1) (* 2 (cot $0)))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (- (* (^ cot 2) $0) 1) (* 2 (cot $0)))', 'return': '(cot (* 2 $0))'}}, {'type': 'regex', 'vor': {'scheme': '(cot (* 2 $0))', 'return': '(/ (- 1 (* (^ tan 2) $0)) (* 2 (tan $0)))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (- 1 (* (^ tan 2) $0)) (* 2 (tan $0)))', 'return': '(cot (* 2 $0))'}}, {'type': 'regex', 'vor': {'scheme': '(sec (* 2 $0))', 'return': '(/ (^ (sec $0) 2) (- 2 (* (^ sec 2) $0)))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (^ (sec $0) 2) (- 2 (* (^ sec 2) $0)))', 'return': '(sec (* 2 $0))'}}, {'type': 'regex', 'vor': {'scheme': '(sec (* 2 $0))', 'return': '(/ (+ 1 (* (^ tan 2) $0)) (- 1 (* (^ tan 2) $0)))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (+ 1 (* (^ tan 2) $0)) (- 1 (* (^ tan 2) $0)))', 'return': '(sec (* 2 $0))'}}, {'type': 'regex', 'vor': {'scheme': '(cosec (* 2 $0))', 'return': '(/ (* (sec $0) (cosec $0)) 2)'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (* (sec $0) (cosec $0)) 2)', 'return': '(cosec (* 2 $0))'}}, {'type': 'regex', 'vor': {'scheme': '(cosec (* 2 $0))', 'return': '(/ (+ 1 (* (^ tan 2) $0)) (* 2 (tan $0)))'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (+ 1 (* (^ tan 2) $0)) (* 2 (tan $0)))', 'return': '(cosec (* 2 $0))'}}]
        super().__init__(equation, direction, idx, calculateSchemeNodeChanges=calculateSchemeNodeChanges, verbose=verbose)