
from foundation.automat.core.manipulate.manipulate import Manipulate


class Trigonometricpowerreduction(Manipulate):
    """

    """
    TYPE = 'trigonometric_standard'

    def __init__(self, equation, direction, idx, verbose=False):
        """

        """
        self.rawRegexes = [{'type': 'regex', 'vor': {'scheme': '(^ (sin $0) 2)', 'return': '(/ (- 1 (cos (* 2 $0))) 2)'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (- 1 (cos (* 2 $0))) 2)', 'return': '(^ (sin $0) 2)'}}, {'type': 'regex', 'vor': {'scheme': '(^ (sin $0) 3)', 'return': '(/ (- (* 3 (sin $0)) (sin (* 3 $0))) 4)'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (- (* 3 (sin $0)) (sin (* 3 $0))) 4)', 'return': '(^ (sin $0) 3)'}}, {'type': 'regex', 'vor': {'scheme': '(^ (sin $0) 4)', 'return': '(/ (+ (- 3 (* 4 (cos (* 2 $0)))) (cos (* 4 $0))) 8)'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (+ (- 3 (* 4 (cos (* 2 $0)))) (cos (* 4 $0))) 8)', 'return': '(^ (sin $0) 4)'}}, {'type': 'regex', 'vor': {'scheme': '(^ (sin $0) 5)', 'return': '(/ (+ (- (* 10 (sin $0)) (* 5 (sin (* 3 $0)))) (sin (* 5 $0))) 16)'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (+ (- (* 10 (sin $0)) (* 5 (sin (* 3 $0)))) (sin (* 5 $0))) 16)', 'return': '(^ (sin $0) 5)'}}, {'type': 'regex', 'vor': {'scheme': '(^ (cos $0) 2)', 'return': '(/ (+ 1 (cos (* 2 $0))) 2)'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (+ 1 (cos (* 2 $0))) 2)', 'return': '(^ (cos $0) 2)'}}, {'type': 'regex', 'vor': {'scheme': '(^ (cos $0) 3)', 'return': '(/ (+ (* 3 (cos $0)) (cos (* 3 $0))) 4)'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (+ (* 3 (cos $0)) (cos (* 3 $0))) 4)', 'return': '(^ (cos $0) 3)'}}, {'type': 'regex', 'vor': {'scheme': '(^ (cos $0) 4)', 'return': '(/ (+ (+ 3 (* 4 (cos (* 2 $0)))) (cos (* 4 $0))) 8)'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (+ (+ 3 (* 4 (cos (* 2 $0)))) (cos (* 4 $0))) 8)', 'return': '(^ (cos $0) 4)'}}, {'type': 'regex', 'vor': {'scheme': '(^ (cos $0) 5)', 'return': '(/ (+ (+ (* 10 (cos $0)) (* 5 (cos $0))) (cos (* 5 $0))) 16)'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (+ (+ (* 10 (cos $0)) (* 5 (cos $0))) (cos (* 5 $0))) 16)', 'return': '(^ (cos $0) 5)'}}, {'type': 'regex', 'vor': {'scheme': '(* (^ (sin $0) 2) (^ (cos $0) 2))', 'return': '(/ (- 1 (cos (* 4 $0))) 8)'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (- 1 (cos (* 4 $0))) 8)', 'return': '(* (^ (sin $0) 2) (^ (cos $0) 2))'}}, {'type': 'regex', 'vor': {'scheme': '(* (^ (sin $0) 3) (^ (cos $0) 3))', 'return': '(/ (- (* 3 (sin (* 2 $0))) (sin (* 6 $0))) 32)'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (- (* 3 (sin (* 2 $0))) (sin (* 6 $0))) 32)', 'return': '(* (^ (sin $0) 3) (^ (cos $0) 3))'}}, {'type': 'regex', 'vor': {'scheme': '(* (^ (sin $0) 4) (^ (cos $0) 4))', 'return': '(/ (+ (- 3 (* 4 (cos (* 4 $0)))) (cos (* 8 $0))) 128)'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (+ (- 3 (* 4 (cos (* 4 $0)))) (cos (* 8 $0))) 128)', 'return': '(* (^ (sin $0) 4) (^ (cos $0) 4))'}}, {'type': 'regex', 'vor': {'scheme': '(* (^ (sin $0) 5) (^ (cos $0) 5))', 'return': '(/ (+ (- (* 10 (sin (* 2 $0))) (* 5 (sin (* 6 $0)))) (sin (* 10 $0))) 512)'}, 'minArgs': {'$0': 0}, 'maxArgs': {'$0': None}, 'preCond': {'$0': None}, 'hin': {'scheme': '(/ (+ (- (* 10 (sin (* 2 $0))) (* 5 (sin (* 6 $0)))) (sin (* 10 $0))) 512)', 'return': '(* (^ (sin $0) 5) (^ (cos $0) 5))'}}]
        super().__init__(equation, direction, idx, verbose=verbose)