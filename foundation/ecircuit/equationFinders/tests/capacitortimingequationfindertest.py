import inspect
import pprint

from foundation.automat.core.equation import Equation
from foundation.ecircuit.equationFinders.capacitortimingequationfinder import CapacitortimingEquationFinder
from foundation.ecircuit.equationFinders.equationfinder import EquationFinder


pp = pprint.PrettyPrinter(indent=4)


def cte__ac_twoCapacitor_series(verbose=False):
    networkGraph = {0: [2, 4], 1: [2, 5], 2: [0, 1], 3: [4, 5], 4: [0, 3], 5: [1, 3]}
    id__type = {
    0: 'capacitor',
    1: 'AC_signal_generator',
    2: 'wire',
    3: 'capacitor',
    4: 'wire',
    5: 'wire'}
    id__positiveLeadsDirections = {   0: [[0, 1]],
    1: [[0, 1]],
    2: [   [0, 1],
           [1, 0],
           [0, 2],
           [2, 0],
           [0, 3],
           [3, 0],
           [0, 4],
           [4, 0],
           [0, 5],
           [5, 0],
           [0, 6],
           [6, 0],
           [1, 2],
           [2, 1],
           [1, 3],
           [3, 1],
           [1, 4],
           [4, 1],
           [1, 5],
           [5, 1],
           [1, 6],
           [6, 1],
           [2, 3],
           [3, 2],
           [2, 4],
           [4, 2],
           [2, 5],
           [5, 2],
           [2, 6],
           [6, 2],
           [3, 4],
           [4, 3],
[3, 5],
           [5, 3],
           [3, 6],
           [6, 3],
           [4, 5],
           [5, 4],
           [4, 6],
           [6, 4],
           [5, 6],
           [6, 5]],
    3: [[0, 1]],
    4: [   [0, 1],
           [1, 0],
           [0, 2],
           [2, 0],
           [0, 3],
           [3, 0],
           [1, 2],
           [2, 1],
           [1, 3],
           [3, 1],
           [2, 3],
           [3, 2]],
    5: [   [0, 1],
           [1, 0],
           [0, 2],
           [2, 0],
           [0, 3],
           [3, 0],
           [0, 4],
           [4, 0],
           [0, 5],
           [5, 0],
           [0, 6],
           [6, 0],
           [1, 2],
           [2, 1],
           [1, 3],
           [3, 1],
           [1, 4],
           [4, 1],
           [1, 5],
           [5, 1],
           [1, 6],
           [6, 1],
           [2, 3],
           [3, 2],
           [2, 4],
           [4, 2],
           [2, 5],
           [5, 2],
           [2, 6],
           [6, 2],
           [3, 4],
           [4, 3],
           [3, 5],
           [5, 3],
           [3, 6],
           [6, 3],
           [4, 5],
           [5, 4],
           [4, 6],
           [6, 4],
           [5, 6],
           [6, 5]]}
    edge__solderableIndices = {   (0, 1): (0, 0),
    (0, 2): (0, 0),
    (0, 3): (1, 0),
    (0, 4): (1, 0),
    (1, 0): (0, 0),
    (1, 2): (0, 0),
    (1, 3): (1, 1),
    (1, 5): (1, 1),
    (2, 0): (0, 0),
    (2, 1): (0, 0),
    (3, 0): (1, 0),
    (3, 1): (1, 1),
    (3, 4): (1, 0),
    (3, 5): (1, 1),
    (4, 0): (1, 0),
    (4, 3): (1, 0),
    (5, 1): (1, 1),
    (5, 3): (1, 1)}

    returnData = []
    eqFinder = CapacitortimingEquationFinder(networkGraph, id__type, id__positiveLeadsDirections, edge__solderableIndices)
    for infoD in eqFinder.findEquations():
        equation = infoD['equation']; list_list_networkNodeIds = infoD['list_list_networkNodeIds']
        variableStr__nodeId = {}
        for nodeId, list_variableStr in EquationFinder.componentId__list_variables.items():
            for variableStr in list_variableStr:
                variableStr__nodeId[variableStr] = nodeId
        returnData.append({
            'equation':equation._eqs,
            'list_list_networkNodeIds':list_list_networkNodeIds,
            'variableInfos':EquationFinder.componentId__list_variables,
            'variables':list(equation.variables.keys()),
            'variableStr__nodeId':variableStr__nodeId
        })

    print(inspect.currentframe().f_code.co_name, ' PASSED? ', )
    if verbose:
        print('returnData')
        pp.pprint(returnData)


def cte__ac_twoCapacitor_parallel(verbose=False):
    networkGraph = {   0: [2, 6],
    1: [2, 4, 10],
    2: [0, 1],
    3: [4, 7],
    4: [3, 1],
    5: [6, 7, 9],
    6: [0, 5],
    7: [3, 5],
    8: [9, 10],
    9: [8, 5],
    10: [8, 1]}
    id__type = {   0: 'capacitor',
    1: 'wire',
    2: 'wire',
    3: 'capacitor',
    4: 'wire',
    5: 'wire',
    6: 'wire',
    7: 'wire',
    8: 'AC_signal_generator',
    9: 'wire',
    10: 'wire'}
    id__positiveLeadsDirections = {   0: [[0, 1]],
    1: [[0, 0]],
    2: [   [0, 1],
           [1, 0],
           [0, 2],
           [2, 0],
           [0, 3],
           [3, 0],
           [0, 4],
           [4, 0],
           [0, 5],
           [5, 0],
           [1, 2],
           [2, 1],
           [1, 3],
           [3, 1],
           [1, 4],
           [4, 1],
           [1, 5],
           [5, 1],
           [2, 3],
           [3, 2],
           [2, 4],
           [4, 2],
           [2, 5],
           [5, 2],
           [3, 4],
           [4, 3],
           [3, 5],
           [5, 3],
           [4, 5],
           [5, 4]],
    3: [[0, 1]],
    4: [   [0, 1],
           [1, 0],
           [0, 2],
           [2, 0],
           [0, 3],
           [3, 0],
           [0, 4],
           [4, 0],
           [0, 5],
           [5, 0],
           [1, 2],
           [2, 1],
           [1, 3],
           [3, 1],
           [1, 4],
           [4, 1],
           [1, 5],
           [5, 1],
           [2, 3],
           [3, 2],
           [2, 4],
           [4, 2],
           [2, 5],
           [5, 2],
           [3, 4],
           [4, 3],
           [3, 5],
           [5, 3],
           [4, 5],
           [5, 4]],
    5: [[0, 0]],
    6: [   [0, 1],
           [1, 0],
           [0, 2],
           [2, 0],
           [0, 3],
           [3, 0],
           [0, 4],
           [4, 0],
           [0, 5],
           [5, 0],
           [1, 2],
           [2, 1],
           [1, 3],
           [3, 1],
           [1, 4],
           [4, 1],
           [1, 5],
           [5, 1],
           [2, 3],
           [3, 2],
           [2, 4],
           [4, 2],
           [2, 5],
           [5, 2],
           [3, 4],
           [4, 3],
           [3, 5],
           [5, 3],
           [4, 5],
           [5, 4]],
    7: [   [0, 1],
           [1, 0],
           [0, 2],
           [2, 0],
           [0, 3],
           [3, 0],
           [0, 4],
           [4, 0],
           [0, 5],
           [5, 0],
           [1, 2],
           [2, 1],
           [1, 3],
           [3, 1],
           [1, 4],
           [4, 1],
           [1, 5],
           [5, 1],
           [2, 3],
           [3, 2],
           [2, 4],
           [4, 2],
           [2, 5],
           [5, 2],
           [3, 4],
           [4, 3],
           [3, 5],
           [5, 3],
           [4, 5],
           [5, 4]],
    8: [[0, 1]],
    9: [   [0, 1],
           [1, 0],
           [0, 2],
           [2, 0],
           [0, 3],
           [3, 0],
           [0, 4],
           [4, 0],
           [0, 5],
           [5, 0],
           [1, 2],
           [2, 1],
           [1, 3],
           [3, 1],
           [1, 4],
           [4, 1],
           [1, 5],
           [5, 1],
           [2, 3],
           [3, 2],
           [2, 4],
           [4, 2],
           [2, 5],
           [5, 2],
           [3, 4],
           [4, 3],
           [3, 5],
           [5, 3],
           [4, 5],
           [5, 4]],
    10: [   [0, 1],
            [1, 0],
            [0, 2],
            [2, 0],
            [0, 3],
            [3, 0],
            [0, 4],
            [4, 0],
            [0, 5],
            [5, 0],
            [1, 2],
            [2, 1],
            [1, 3],
            [3, 1],
            [1, 4],
            [4, 1],
            [1, 5],
            [5, 1],
            [2, 3],
            [3, 2],
            [2, 4],
            [4, 2],
            [2, 5],
            [5, 2],
            [3, 4],
            [4, 3],
            [3, 5],
            [5, 3],
            [4, 5],
            [5, 4]]}
    edge__solderableIndices = {   (0, 1): (1, 0),
    (0, 2): (1, 0),
    (0, 5): (0, 0),
    (0, 6): (0, 0),
    (1, 0): (1, 0),
    (1, 2): (1, 0),
    (1, 3): (1, 0),
    (1, 4): (1, 0),
    (1, 8): (1, 0),
    (1, 10): (1, 0),
    (2, 0): (1, 0),
    (2, 1): (1, 0),
    (3, 1): (1, 0),
    (3, 4): (1, 0),
    (3, 5): (0, 0),
    (3, 7): (0, 0),
    (4, 1): (1, 0),
    (4, 3): (1, 0),
    (5, 0): (0, 0),
    (5, 3): (0, 0),
    (5, 6): (0, 0),
    (5, 7): (0, 0),
    (5, 8): (0, 0),
    (5, 9): (0, 0),
    (6, 0): (0, 0),
    (6, 5): (0, 0),
    (7, 3): (0, 0),
    (7, 5): (0, 0),
    (8, 1): (1, 0),
    (8, 5): (0, 0),
    (8, 9): (0, 0),
    (8, 10): (1, 0),
    (9, 5): (0, 0),
    (9, 8): (0, 0),
    (10, 1): (1, 0),
    (10, 8): (1, 0)}

    returnData = []
    eqFinder = CapacitortimingEquationFinder(networkGraph, id__type, id__positiveLeadsDirections, edge__solderableIndices)
    for infoD in eqFinder.findEquations():
        equation = infoD['equation']; list_list_networkNodeIds = infoD['list_list_networkNodeIds']
        variableStr__nodeId = {}
        for nodeId, list_variableStr in EquationFinder.componentId__list_variables.items():
            for variableStr in list_variableStr:
                variableStr__nodeId[variableStr] = nodeId
        returnData.append({
            'equation':equation._eqs,
            'list_list_networkNodeIds':list_list_networkNodeIds,
            'variableInfos':EquationFinder.componentId__list_variables,
            'variables':list(equation.variables.keys()),
            'variableStr__nodeId':variableStr__nodeId
        })

    print(inspect.currentframe().f_code.co_name, ' PASSED? ', )
    if verbose:
        print('returnData')
        pp.pprint(returnData)


if __name__=='__main__':
    cte__ac_twoCapacitor_series(True)
    cte__ac_twoCapacitor_parallel(True)