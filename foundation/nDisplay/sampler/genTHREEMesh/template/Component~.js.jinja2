import * as THREE from '../three/three.module.js';

/**
 *
 * Is a THREE.Object3D that has a few disjoint meshes, with a list of touchingFaces, whose corners wires will originate (and end)
 */
class Component{{className}} extends THREE.Object3D {

    constructor(position, rotation={x:0, y:0, z:0}) {
        super();

        this.type = "{{type}}";

        this.positiveLeadsDirections = {{positiveLeadsDirections|tojson}};

        const listOfVertices = [
        {% for coordinates in listOfCoordinates %}new Float32Array([
        {% for coordinate in coordinates %}{% set remainder = loop.index % 3 %}{{coordinate}}, {% if remainder == 0 %}
        {% endif %}{% endfor %}
        ]),{% endfor %}
        ];//disjoint meshes

        const listOfIndices = [
        {% for indices in listOfIndices %}new Uint16Array([
        {% for indice in indices %}{% set remainder = loop.index % 3 %}{{indice}}, {% if remainder == 0 %}
        {% endif %}{% endfor %}
        ]),{% endfor %}
        ];//disjoint meshes

        const listOfColors = [
        {% for colors in listOfColors %}new Float32Array([
        {% for color in colors %}{% set remainder = loop.index % 3 %}{{color}}, {% if remainder == 0 %}
        {% endif %}{% endfor %}
        ]),{% endfor %}
        ];//disjoint meshes

        this.boundingBox = null;

        for(let i=0; i<listOfVertices.length; i++) {
            const geometry = new THREE.BufferGeometry();
            const vertices = listOfVertices[i];
            const indices = listOfIndices[i];
            const colors = listOfColors[i];
            geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));
            geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
            geometry.setIndex(new THREE.BufferAttribute(indices, 1));
            const material = new THREE.MeshBasicMaterial({
                vertexColors: true, 
                flatShading: true, // this disables vertex interpolation, also known as Blending
                side: THREE.DoubleSide //ensure backface shows color too
            });
            const disjointMesh = new THREE.Mesh(geometry, material);
            this.add(disjointMesh);
        }


        const solderableLeads = [
        {% for solderableLeadsInfo in solderableLeads %}
        [
            {% for touchingFacePoints in solderableLeadsInfo['touchingFaceCoordinates'] %}
            {
                'touchingFaceCoordinates':[
                    {% for touchingFacePoint in touchingFacePoints %}{{touchingFacePoint[0]}}, {{touchingFacePoint[1]}}, {{touchingFacePoint[2]}},
                    {% endfor %}
                ],
            },
            {% endfor %}
        ],
        {% endfor %}
        ];

        const touchPointsOfSolderableLeads = [
        {% for solderableLeadsInfo in solderableLeads %}
            [{{solderableLeadsInfo['touchingCoordinate'][0]}}, {{solderableLeadsInfo['touchingCoordinate'][1]}}, {{solderableLeadsInfo['touchingCoordinate'][2]}}],
        {% endfor %}

        ]
        const uuid__type = {}; this.solderableIdx__touchPointUUID = {}
        this.touchPointsOfSolderableLeads = touchPointsOfSolderableLeads;
        for (let i=0; i<touchPointsOfSolderableLeads.length; i++) {
            let touchPoint = touchPointsOfSolderableLeads[i];

            const geometry = new THREE.BufferGeometry();
            geometry.setAttribute('position', new THREE.Float32BufferAttribute(touchPoint, 3));

            const material = new THREE.PointsMaterial({ color: 0xff0000, size: 0.1 });
            const point = new THREE.Points(geometry, material);
            this.add(point); // scene or any Object3D

            uuid__type[point.uuid] = 'TOUCH_POINT';
            this.solderableIdx__touchPointUUID[i] = point.uuid;
        }


        this.solderableLeads = solderableLeads;
        const solderableLeadsIdx_touchingBoxesIdx__attachmentId = {}; const attachmentId__solderableLeadsIdx_touchingBoxesIdx = {};
        for ( let i = 0; i<solderableLeads.length; i++) {
            let touchingFaces = solderableLeads[i];
            for(let j = 0; j<touchingFaces.length; j++) {
                const touchingFaceCoordinates = new Float32Array(touchingFaces[j]['touchingFaceCoordinates']);
                const touchingFaceGeometry = new THREE.BufferGeometry();
                touchingFaceGeometry.setAttribute('position', new THREE.BufferAttribute(touchingFaceCoordinates, 3));
                const touchingFaceColors = new Float32Array([//2 triangles per face,  each row is R G B, R G B, R G B,
                    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
                    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
                ]);
                touchingFaceGeometry.setAttribute('color', new THREE.BufferAttribute(touchingFaceColors, 3));
                const touchingFaceIndices = new Uint16Array([
                    0, 1, 3, 2, 3, 1, //top face
                ]);
                touchingFaceGeometry.setIndex(new THREE.BufferAttribute(touchingFaceIndices, 1));
                const touchingFaceMaterial = new THREE.MeshBasicMaterial({
                    vertexColors: true,
                    // flatShading: true, // this disables vertex interpolation, also known as Blending Does not exist in our version of THREE
                    side: THREE.DoubleSide //ensure backface shows color too
                });
                const touchingFace = new THREE.Line(touchingFaceGeometry, touchingFaceMaterial);
                this.add(touchingFace);//this.attach(touchingFace);
                uuid__type[touchingFace.uuid] = 'TOUCHING_BOX';
                solderableLeadsIdx_touchingBoxesIdx__attachmentId[[i, j]] = touchingFace.uuid;
                attachmentId__solderableLeadsIdx_touchingBoxesIdx[touchingFace.uuid] = [i, j];
            }
        }
        this.solderableLeadsIdx_touchingBoxesIdx__attachmentId = solderableLeadsIdx_touchingBoxesIdx__attachmentId;
        this.attachmentId__solderableLeadsIdx_touchingBoxesIdx = attachmentId__solderableLeadsIdx_touchingBoxesIdx;
        this.uuid__type = uuid__type;

        //update world position
        this.position.set(position.x, position.y, position.z);
        this.rotation.set(rotation.x, rotation.y, rotation.z);
    }

    /**
     * get all touchingBoxes
     * **/
    getAllTouchingBoxesAndInsertVectors() {
        let updatedSolderableLeads = [];
        for ( let i = 0; i < this.solderableLeads.length; i ++ ) {
            let touchingBoxes = this.solderableLeads[i];
            let updatedSolderableLead = [];
            for ( let j = 0; j < touchingBoxes.length; j ++ ) {
                let touchingBoxAttachmentId = this.solderableLeadsIdx_touchingBoxesIdx__attachmentId[[i, j]];
                let touchingBox = this.getObjectByProperty('uuid', touchingBoxAttachmentId);//is THREE.Line
                updatedSolderableLead.push({
                    'touchingBox':this.updateListOfCoordinates(touchingBox)
                });
            }
            updatedSolderableLeads.push(updatedSolderableLead);
        }
        return updatedSolderableLeads;
    }

    /**
     * get touchPoint of solderableIdx, in javascript array [x, y, z]
     * **/
    getTouchPoint(solderableIdx) {
        let point = this.getObjectByProperty('uuid', this.solderableIdx__touchPointUUID[solderableIdx]);
        return this.updateListOfCoordinates(point)[0];
    }

    /**
     * Converts THREE.Object3D.geometry.position.array to a Javascript.Array of [x, y, z]; where x, y, z are Javascript floats
     * **/
    updateListOfCoordinates(threeObject3D) {
        threeObject3D.geometry.computeBoundingBox(); threeObject3D.updateMatrixWorld(true);
        const pointsList = this.threeFloatsToAPoint(threeObject3D.geometry.getAttribute('position').array);
        const updatedPoints = [];
        for(let i=0; i<pointsList.length; i++) {
            const oldPoint = new THREE.Vector3(pointsList[i][0], pointsList[i][1],pointsList[i][2]);
            const updatedPoint = oldPoint.clone().applyMatrix4(threeObject3D.matrixWorld);
            updatedPoints.push([updatedPoint.x, updatedPoint.y, updatedPoint.z]);
        }
        return updatedPoints;
    }

    /**
     * hides the touchingBoxes
     * **/
    setAllTouchingBoxVisibility(visible) {
        for ( let i = 0; i < this.solderableLeads.length; i ++ ) {
            let touchingBoxes = this.solderableLeads[i];
            let updatedSolderableLead = [];
            for ( let j = 0; j < touchingBoxes.length; j ++ ) {
                let touchingBoxAttachmentId = this.solderableLeadsIdx_touchingBoxesIdx__attachmentId[[i, j]];
                let touchingBox = this.getObjectByProperty('uuid', touchingBoxAttachmentId);//is THREE.Line
                touchingBox.visible=visible;
            }
        }
    }

    /**
     * check if the casted ray will intersect with this component or its touchingBoxes
     * **/
    raycast(raycaster, intersects) {//TODO unfinished<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        const uuidInserted = [];
        for(let i=0; i<this.children.length; i++) {
            const child = this.children[i];
            if (this.uuid__type[child.uuid] == 'TOUCHING_BOX') {
                // console.log(child, 'child');
                //check for intersection with face
                const boxPointList = this.threeFloatsToAPoint(child.geometry.getAttribute('position').array);//first corner, vertices is a flat list
                // const wBFacesThatIntersectWithiV = [];

                function faceIntersectionCallback(faceIndices) {
                    // wBFacesThatIntersectWithiV.push(faceIndices);
                    if (uuidInserted.indexOf(child.uuid) >= 0) {
                        intersects.push(child); uuidInserted.push(child.uuid);
                    }
                    
                }
                //TODO the ray.direction is a little weird, needs to check in three.core.js, might be perspective|orthographic difference setFromCamera, line 54312
                const rayVecCoordinate = [raycaster.ray.direction.x, raycaster.ray.direction.y, raycaster.ray.direction.z];
                
                //convert raycaster.ray.origin to list of three floats
                const origin = [raycaster.ray.origin.x, raycaster.ray.origin.y, raycaster.ray.origin.z];
                // console.log('origin', origin); console.log('rayVecCoordinate', rayVecCoordinate);
                (new RayIntersectBox()).facesOfIntersection(boxPointList, origin, rayVecCoordinate, faceIntersectionCallback);
            }
        }
    }



    /**
     * A list of floats, whose amount is divisible by 3. Rearrange every 3 floats into a coordinate point.
     * **/
    threeFloatsToAPoint(coordinates) {
        const points = []; let point = [];
        for (let i=0; i<coordinates.length; i++) {
            point.push(coordinates[i]);
            if (i%3 == 2) {
                points.push(point); point = [];
            }
        }
        return points;
    }
}

export { Component{{className}} };