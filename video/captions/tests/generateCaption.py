import inspect
import pprint

from video.captions.captions import generateECircuitVideoCaptions


pp = pprint.PrettyPrinter(indent=4)

def test__captionGenerate(verbose=False):
    introduction = {
        'en-US':'The is a two resistor circuit connected in parallel',
        'zh-CN':'',
        'ja-JP':'',
        'de-DE':'',
        'fr-FR':'',
        'ru-RU':''
    }
    solvingSteps = [   {   'hin': {},
        'hin__subSteps': [],
        'sub': '',
        'vor': {   'latex': '(-I_{DC_{8}}+I_{R_{0}})+I_{R_{3}}=0',
                   'root': ('=', 3),
                   'scheme': '(= (+ (+ (- 0 I_{DC_{8}}) I_{R_{0}}) I_{R_{3}}) '
                             '0)',
                   'variables': ['I_{R_{3}}', 'I_{R_{0}}', 'I_{DC_{8}}']},
        'vor__subSteps': []},
    {   'hin': {   'latex': '\\frac{V_{DC_{8}}}{I_{DC_{8}}}=R_{DC_{8}}',
                   'root': ('=', 1),
                   'scheme': '(= (/ V_{DC_{8}} I_{DC_{8}}) R_{DC_{8}})',
                   'variables': ['R_{DC_{8}}', 'I_{DC_{8}}', 'V_{DC_{8}}']},
        'hin__subSteps': [   {   'argumentIdx': 1,
                                 'functionName': '/',
                                 'id': 0,
                                 'lastId': 1,
                                 'resultLatexStr': 'I_{DC_{8}}=\\frac{V_{DC_{8}}}{R_{DC_{8}}}',
                                 'resultSchemeStr': '(= I_{DC_{8}} (/ '
                                                    'V_{DC_{8}} R_{DC_{8}}))',
                                 'resultVariables': [   'I_{DC_{8}}',
                                                        'V_{DC_{8}}',
                                                        'R_{DC_{8}}'],
                                 'stepType': 'solving'}],
        'sub': 'I_{DC_{8}}',
        'vor': {   'latex': 'I_{R_{3}}+I_{R_{0}}=\\frac{V_{DC_{8}}}{R_{DC_{8}}}',
                   'root': ('=', 1),
                   'scheme': '(= (+ I_{R_{3}} I_{R_{0}}) (/ V_{DC_{8}} '
                             'R_{DC_{8}}))',
                   'variables': ['R_{DC_{8}}', 'I_{DC_{8}}', 'V_{DC_{8}}']},
        'vor__subSteps': [   {   'argumentIdx': 0,
                                 'functionName': '+',
                                 'id': 2,
                                 'lastId': 3,
                                 'resultLatexStr': '-I_{DC_{8}}+I_{R_{0}}=-I_{R_{3}}',
                                 'resultSchemeStr': '(= (+ (- 0 I_{DC_{8}}) '
                                                    'I_{R_{0}}) (- 0 '
                                                    'I_{R_{3}}))',
                                 'resultVariables': [   'I_{DC_{8}}',
                                                        'I_{R_{0}}',
                                                        'I_{R_{3}}'],
                                 'stepType': 'solving'},
                             {   'argumentIdx': 0,
                                 'functionName': '+',
                                 'id': 1,
                                 'lastId': 3,
                                 'resultLatexStr': '-I_{DC_{8}}=-I_{R_{3}}-I_{R_{0}}',
                                 'resultSchemeStr': '(= (- 0 I_{DC_{8}}) (- (- '
                                                    '0 I_{R_{3}}) I_{R_{0}}))',
                                 'resultVariables': [   'I_{DC_{8}}',
                                                        'I_{R_{3}}',
                                                        'I_{R_{0}}'],
                                 'stepType': 'solving'},
                             {   'argumentIdx': 1,
                                 'functionName': '-',
                                 'id': 0,
                                 'lastId': 3,
                                 'resultLatexStr': 'I_{DC_{8}}=--I_{R_{3}}-I_{R_{0}}',
                                 'resultSchemeStr': '(= I_{DC_{8}} (- 0 (- (- '
                                                    '0 I_{R_{3}}) I_{R_{0}})))',
                                 'resultVariables': [   'I_{DC_{8}}',
                                                        'I_{R_{3}}',
                                                        'I_{R_{0}}'],
                                 'stepType': 'solving'},
                             {   'argumentIdx': None,
                                 'functionName': (   'Doublenegative',
                                                     'pretty',
                                                     '(- 0 (- (- 0 $0) $1))',
                                                     '(+ $0 $1)'),
                                 'id': None,
                                 'lastId': None,
                                 'resultLatexStr': 'I_{DC_{8}}=I_{R_{3}}+I_{R_{0}}',
                                 'resultSchemeStr': '(= I_{DC_{8}} (+ '
                                                    'I_{R_{3}} I_{R_{0}}))',
                                 'resultVariables': [   'I_{DC_{8}}',
                                                        'I_{R_{3}}',
                                                        'I_{R_{0}}'],
                                 'stepType': 'simplification'}]},
    {   'hin': {   'latex': '\\frac{V_{R_{0}}}{I_{R_{0}}}=R_{R_{0}}',
                   'root': ('=', 1),
                   'scheme': '(= (/ V_{R_{0}} I_{R_{0}}) R_{R_{0}})',
                   'variables': ['R_{R_{0}}', 'I_{R_{0}}', 'V_{R_{0}}']},
        'hin__subSteps': [   {   'argumentIdx': 1,
                                 'functionName': '/',
                                 'id': 0,
                                 'lastId': 1,
                                 'resultLatexStr': 'I_{R_{0}}=\\frac{V_{R_{0}}}{R_{R_{0}}}',
                                 'resultSchemeStr': '(= I_{R_{0}} (/ V_{R_{0}} '
                                                    'R_{R_{0}}))',
                                 'resultVariables': [   'I_{R_{0}}',
                                                        'V_{R_{0}}',
                                                        'R_{R_{0}}'],
                                 'stepType': 'solving'}],
        'sub': 'I_{R_{0}}',
        'vor': {   'latex': '\\frac{V_{DC_{8}}}{R_{DC_{8}}}-I_{R_{3}}=\\frac{V_{R_{0}}}{R_{R_{0}}}',
                   'root': ('=', 1),
                   'scheme': '(= (- (/ V_{DC_{8}} R_{DC_{8}}) I_{R_{3}}) (/ '
                             'V_{R_{0}} R_{R_{0}}))',
                   'variables': ['R_{R_{0}}', 'I_{R_{0}}', 'V_{R_{0}}']},
        'vor__subSteps': [   {   'argumentIdx': 1,
                                 'functionName': '+',
                                 'id': 24,
                                 'lastId': 1,
                                 'resultLatexStr': 'I_{R_{0}}=\\frac{V_{DC_{8}}}{R_{DC_{8}}}-I_{R_{3}}',
                                 'resultSchemeStr': '(= I_{R_{0}} (- (/ '
                                                    'V_{DC_{8}} R_{DC_{8}}) '
                                                    'I_{R_{3}}))',
                                 'resultVariables': [   'I_{R_{0}}',
                                                        'V_{DC_{8}}',
                                                        'R_{DC_{8}}',
                                                        'I_{R_{3}}'],
                                 'stepType': 'solving'}]},
    {   'hin': {   'latex': '\\frac{V_{R_{3}}}{I_{R_{3}}}=R_{R_{3}}',
                   'root': ('=', 1),
                   'scheme': '(= (/ V_{R_{3}} I_{R_{3}}) R_{R_{3}})',
                   'variables': ['R_{R_{3}}', 'I_{R_{3}}', 'V_{R_{3}}']},
        'hin__subSteps': [   {   'argumentIdx': 1,
                                 'functionName': '/',
                                 'id': 0,
                                 'lastId': 1,
                                 'resultLatexStr': 'I_{R_{3}}=\\frac{V_{R_{3}}}{R_{R_{3}}}',
                                 'resultSchemeStr': '(= I_{R_{3}} (/ V_{R_{3}} '
                                                    'R_{R_{3}}))',
                                 'resultVariables': [   'I_{R_{3}}',
                                                        'V_{R_{3}}',
                                                        'R_{R_{3}}'],
                                 'stepType': 'solving'}],
        'sub': 'I_{R_{3}}',
        'vor': {   'latex': '\\frac{V_{DC_{8}}}{R_{DC_{8}}}-\\frac{V_{R_{0}}}{R_{R_{0}}}=\\frac{V_{R_{3}}}{R_{R_{3}}}',
                   'root': ('=', 1),
                   'scheme': '(= (- (/ V_{DC_{8}} R_{DC_{8}}) (/ V_{R_{0}} '
                             'R_{R_{0}})) (/ V_{R_{3}} R_{R_{3}}))',
                   'variables': ['R_{R_{3}}', 'I_{R_{3}}', 'V_{R_{3}}']},
        'vor__subSteps': [   {   'argumentIdx': 1,
                                 'functionName': '-',
                                 'id': 33,
                                 'lastId': 1,
                                 'resultLatexStr': 'I_{R_{3}}=\\frac{V_{DC_{8}}}{R_{DC_{8}}}-\\frac{V_{R_{0}}}{R_{R_{0}}}',
                                 'resultSchemeStr': '(= I_{R_{3}} (- (/ '
                                                    'V_{DC_{8}} R_{DC_{8}}) (/ '
                                                    'V_{R_{0}} R_{R_{0}})))',
                                 'resultVariables': [   'I_{R_{3}}',
                                                        'V_{DC_{8}}',
                                                        'R_{DC_{8}}',
                                                        'V_{R_{0}}',
                                                        'R_{R_{0}}'],
                                 'stepType': 'solving'}]},
    {   'hin': {   'latex': 'V_{DC_{8}}-V_{R_{3}}=0',
                   'root': ('=', 1),
                   'scheme': '(= (- V_{DC_{8}} V_{R_{3}}) 0)',
                   'variables': ['V_{R_{3}}', 'V_{DC_{8}}']},
        'hin__subSteps': [   {   'argumentIdx': 1,
                                 'functionName': '-',
                                 'id': 0,
                                 'lastId': 1,
                                 'resultLatexStr': 'V_{R_{3}}=V_{DC_{8}}-0',
                                 'resultSchemeStr': '(= V_{R_{3}} (- '
                                                    'V_{DC_{8}} 0))',
                                 'resultVariables': ['V_{R_{3}}', 'V_{DC_{8}}'],
                                 'stepType': 'solving'},
                             {   'argumentIdx': None,
                                 'functionName': (   'Subtractzero',
                                                     'essential',
                                                     '(- $0 0)',
                                                     '$0'),
                                 'id': None,
                                 'lastId': None,
                                 'resultLatexStr': 'V_{R_{3}}=V_{DC_{8}}',
                                 'resultSchemeStr': '(= V_{R_{3}} V_{DC_{8}})',
                                 'resultVariables': ['V_{R_{3}}', 'V_{DC_{8}}'],
                                 'stepType': 'simplification'}],
        'sub': 'V_{R_{3}}',
        'vor': {   'latex': '(\\frac{V_{DC_{8}}}{R_{DC_{8}}}-\\frac{V_{R_{0}}}{R_{R_{0}}})R_{R_{3}}=V_{DC_{8}}',
                   'root': ('=', 1),
                   'scheme': '(= (* (- (/ V_{DC_{8}} R_{DC_{8}}) (/ V_{R_{0}} '
                             'R_{R_{0}})) R_{R_{3}}) V_{DC_{8}})',
                   'variables': ['V_{R_{3}}', 'V_{DC_{8}}']},
        'vor__subSteps': [   {   'argumentIdx': 0,
                                 'functionName': '/',
                                 'id': 0,
                                 'lastId': 1,
                                 'resultLatexStr': '(\\frac{V_{DC_{8}}}{R_{DC_{8}}}-\\frac{V_{R_{0}}}{R_{R_{0}}})R_{R_{3}}=V_{R_{3}}',
                                 'resultSchemeStr': '(= (* (- (/ V_{DC_{8}} '
                                                    'R_{DC_{8}}) (/ V_{R_{0}} '
                                                    'R_{R_{0}})) R_{R_{3}}) '
                                                    'V_{R_{3}})',
                                 'resultVariables': [   'V_{DC_{8}}',
                                                        'R_{DC_{8}}',
                                                        'V_{R_{0}}',
                                                        'R_{R_{0}}',
                                                        'R_{R_{3}}',
                                                        'V_{R_{3}}'],
                                 'stepType': 'solving'}]},
    {   'hin': {   'latex': '-V_{R_{0}}+V_{DC_{8}}=0',
                   'root': ('=', 2),
                   'scheme': '(= (+ (- 0 V_{R_{0}}) V_{DC_{8}}) 0)',
                   'variables': ['V_{DC_{8}}', 'V_{R_{0}}']},
        'hin__subSteps': [   {   'argumentIdx': 0,
                                 'functionName': '+',
                                 'id': 1,
                                 'lastId': 2,
                                 'resultLatexStr': '-V_{R_{0}}=-V_{DC_{8}}',
                                 'resultSchemeStr': '(= (- 0 V_{R_{0}}) (- 0 '
                                                    'V_{DC_{8}}))',
                                 'resultVariables': ['V_{R_{0}}', 'V_{DC_{8}}'],
                                 'stepType': 'solving'},
                             {   'argumentIdx': 1,
                                 'functionName': '-',
                                 'id': 0,
                                 'lastId': 2,
                                 'resultLatexStr': 'V_{R_{0}}=--V_{DC_{8}}',
                                 'resultSchemeStr': '(= V_{R_{0}} (- 0 (- 0 '
                                                    'V_{DC_{8}})))',
                                 'resultVariables': ['V_{R_{0}}', 'V_{DC_{8}}'],
                                 'stepType': 'solving'},
                             {   'argumentIdx': None,
                                 'functionName': (   'Doublenegative',
                                                     'pretty',
                                                     '(- 0 (- 0 $0))',
                                                     '$0'),
                                 'id': None,
                                 'lastId': None,
                                 'resultLatexStr': 'V_{R_{0}}=V_{DC_{8}}',
                                 'resultSchemeStr': '(= V_{R_{0}} V_{DC_{8}})',
                                 'resultVariables': ['V_{R_{0}}', 'V_{DC_{8}}'],
                                 'stepType': 'simplification'}],
        'sub': 'V_{R_{0}}',
        'vor': {   'latex': '(\\frac{V_{DC_{8}}}{R_{DC_{8}}}-\\frac{V_{DC_{8}}}{R_{R_{3}}})R_{R_{0}}=V_{DC_{8}}',
                   'root': ('=', 2),
                   'scheme': '(= (* (- (/ V_{DC_{8}} R_{DC_{8}}) (/ V_{DC_{8}} '
                             'R_{R_{3}})) R_{R_{0}}) V_{DC_{8}})',
                   'variables': ['V_{DC_{8}}', 'V_{R_{0}}']},
        'vor__subSteps': [   {   'argumentIdx': 0,
                                 'functionName': '*',
                                 'id': 6,
                                 'lastId': 1,
                                 'resultLatexStr': '\\frac{V_{DC_{8}}}{R_{DC_{8}}}-\\frac{V_{R_{0}}}{R_{R_{0}}}=\\frac{V_{DC_{8}}}{R_{R_{3}}}',
                                 'resultSchemeStr': '(= (- (/ V_{DC_{8}} '
                                                    'R_{DC_{8}}) (/ V_{R_{0}} '
                                                    'R_{R_{0}})) (/ V_{DC_{8}} '
                                                    'R_{R_{3}}))',
                                 'resultVariables': [   'V_{DC_{8}}',
                                                        'R_{DC_{8}}',
                                                        'V_{R_{0}}',
                                                        'R_{R_{0}}',
                                                        'R_{R_{3}}'],
                                 'stepType': 'solving'},
                             {   'argumentIdx': 1,
                                 'functionName': '-',
                                 'id': 48,
                                 'lastId': 1,
                                 'resultLatexStr': '\\frac{V_{R_{0}}}{R_{R_{0}}}=\\frac{V_{DC_{8}}}{R_{DC_{8}}}-\\frac{V_{DC_{8}}}{R_{R_{3}}}',
                                 'resultSchemeStr': '(= (/ V_{R_{0}} '
                                                    'R_{R_{0}}) (- (/ '
                                                    'V_{DC_{8}} R_{DC_{8}}) (/ '
                                                    'V_{DC_{8}} R_{R_{3}})))',
                                 'resultVariables': [   'V_{R_{0}}',
                                                        'R_{R_{0}}',
                                                        'V_{DC_{8}}',
                                                        'R_{DC_{8}}',
                                                        'R_{R_{3}}'],
                                 'stepType': 'solving'},
                             {   'argumentIdx': 0,
                                 'functionName': '/',
                                 'id': 15,
                                 'lastId': 1,
                                 'resultLatexStr': 'V_{R_{0}}=(\\frac{V_{DC_{8}}}{R_{DC_{8}}}-\\frac{V_{DC_{8}}}{R_{R_{3}}})R_{R_{0}}',
                                 'resultSchemeStr': '(= V_{R_{0}} (* (- (/ '
                                                    'V_{DC_{8}} R_{DC_{8}}) (/ '
                                                    'V_{DC_{8}} R_{R_{3}})) '
                                                    'R_{R_{0}}))',
                                 'resultVariables': [   'V_{R_{0}}',
                                                        'V_{DC_{8}}',
                                                        'R_{DC_{8}}',
                                                        'R_{R_{3}}',
                                                        'R_{R_{0}}'],
                                 'stepType': 'solving'}]},
    {   'hin': {   'latex': '(\\frac{1}{R_{DC_{8}}}-\\frac{1}{R_{R_{3}}})R_{R_{0}}=1',
                   'root': ('=', 0),
                   'scheme': '(= (* (- (/ 1 R_{DC_{8}}) (/ 1 R_{R_{3}})) '
                             'R_{R_{0}}) 1)',
                   'variables': ['R_{R_{0}}', 'R_{DC_{8}}', 'R_{R_{3}}']},
        'hin__subSteps': [],
        'sub': '',
        'vor': {   'latex': '(\\frac{1}{R_{DC_{8}}}-\\frac{1}{R_{R_{3}}})R_{R_{0}}=1',
                   'root': ('=', 0),
                   'scheme': '(= (* (- (/ 1 R_{DC_{8}}) (/ 1 R_{R_{3}})) '
                             'R_{R_{0}}) 1)',
                   'variables': ['R_{R_{0}}', 'R_{DC_{8}}', 'R_{R_{3}}']},
        'vor__subSteps': [   {   'resultLatexStr': 'V_{DC_{8}}(\\frac{1}{R_{DC_{8}}}-\\frac{1}{R_{R_{3}}})R_{R_{0}}=V_{DC_{8}}',
                                 'resultSchemeStr': '(= (* (* V_{DC_{8}} (- (/ '
                                                    '1 R_{DC_{8}}) (/ 1 '
                                                    'R_{R_{3}}))) R_{R_{0}}) '
                                                    'V_{DC_{8}})',
                                 'resultVariables': [   'R_{R_{0}}',
                                                        'R_{DC_{8}}',
                                                        'R_{R_{3}}',
                                                        'V_{DC_{8}}'],
                                 'stepType': 'simplification'},
                             {   'resultLatexStr': '(\\frac{1}{R_{DC_{8}}}-\\frac{1}{R_{R_{3}}})R_{R_{0}}=1',
                                 'resultSchemeStr': '(= (* (- (/ 1 R_{DC_{8}}) '
                                                    '(/ 1 R_{R_{3}})) '
                                                    'R_{R_{0}}) 1)',
                                 'resultVariables': [   'R_{R_{0}}',
                                                        'R_{DC_{8}}',
                                                        'R_{R_{3}}'],
                                 'stepType': 'simplification'}]}]
    captions = generateECircuitVideoCaptions(solvingSteps, introduction)
    if verbose:
        print(captions)
    # print(inspect.currentframe().f_code.co_name, ' PASSED? ', len(Function.TRIGONOMETRIC_NAMES)>0)


if __name__=='__main__':
    test__captionGenerate(True)